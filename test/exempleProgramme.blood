/* les parametres precedes de var definissent implicitement des attributs */
class Point(var x: Integer, var y: Integer, var name: String) is
{
	var static next : Integer := 0;  /* compteur d'instances */
	def static howMany() : Integer := this.next - 1 /* nbre d'instances creees */
	var hasClone : Integer := 0;

	/* la valeur du champ ci-dessous est indefinie si hasClone vaut O. Le probleme
	* est qu'on n'a pas l'equivalent de NULL (du bon type) dans le langage.
	*/
	var clone : Point;

	/* L'en-tete du constructeur dolt etre identique a celui de la classe. * Les parametres precedes de var correspondent implictement a des attributs * de meme nom qui seront intialises automatiquement a la valeur du * parametre, comme si on avait la ligne suivante en tete du constructeur: * this.x := x; this.y := y; this.name := name;
	*/


	def Point(var x: Integer, var y: Integer, var name: String) is {this.next := this.next + 1; }

	def setName(s: String) is { this.name := s; }

	def getx() : Integer := this.x  /* pas de this implicite */

	def gety() : Integer := this.y

	def isCloned() : Integer := this.hasClone <> 0

	def move(dx: Integer, dy: Integer, verbose: Integer) : Point is {
		this.x := this.x + dx; this.y := this.y + dy;
		if verbose then {this.print(verbose); } else {}
		/* pseudio variable 'result' dans laquelle, par convention, on laisse
		* la valeur de retour dune fonction qui a un type de retour. */
		result := this;
	}

	def print(verbose : Integer) is {
		if verbose then "Inside Point::print".println(); else { }
		/* Exemples avec l'operateur & de concatenation de chaines */
		( "= (" & this.x.toString() & ", " & this.y.toString() & ")").println();
	}

	/* par defaut, on ajoute un ' au nom de I'objet. On pourra le changer
	* apres coup avec setName si on veut */

	def clone() : Point is
	{
		/* On memorise le dernier clone construit a partir de cet objet
		* si on voulait on pourrait ler le chainer a la fin de la liste des clones */

		this.clone := new Point(this.x, this.y, this.name & "'");
		this.hasClone := 1;
		result := this.clone;
	}
	/* imprime un objet et ses clones, s'ils existent */
	def allClones () is {
		this.print(0);
		if this.isCloned() then { this.clone.allClones(); } else { }
	}

	def egal(p: Point) : Integer is {
		b1 : Integer := p.getx() - this.x;
		b2 : Integer := p.gety() - this.y;
		is
		if b1 then result := 0; else result := b2 = 0;
	}
}

class Couleur(var coul: Integer) is {
	def Couleur (var coul: Integer) is {
		if coul < 0 then coul := 0;
		else if coul > 2 then coul := 0; else {}
		this.coul := coul;
	}

	def name(verbose: Integer) : String is {
		aux : String := "Blanc";
		is
		if verbose then "Inside Couleur:: couleur".println(); else {}
		if this.coul = 0 then { result := aux; }
		else {
			aux : String := "Gris";
			is
			if this.coul = 1 then aux := "Noir"; else { }
			result := aux;
		}
	}

	def estGris() : Integer is {
		"Inside Couleur::estGris".println();
		result := this.coul = 2;
	}
}

class CouleurFactory() is
{	var static theBlanc: Couleur := new Couleur(0);
	var static theNoir : Couleur := new Couleur(1);
	var static theGris : Couleur := new Couleur(2);
	def CouleurFactory () is {}
	def static blanc() : Couleur := this.theBlanc
	def static noir() : Couleur := this.theNoir
	def static gris() : Couleur := this.theGris
}

class PointColore(x: Integer, y:Integer, var coul: Couleur) extends Point is {
	def PointColore (x: Integer, y:Integer, var coul: Couleur): Point(x, y, "P-" & CptPoint.howMany().toString() ) is { }
	def couleur() : Couleur := this.coul
	def colore() : Integer := this.coul.estGris() <> 0
	def override clone() : Point is {
		result := new PointColore(this.x, this.y, this.coul);
		result.setName(this.name & "'");
		this.hasClone := 1;
		this.clone := result;
	}
	def estGris() : Integer := this.coul.estGris()
	def override print(verbose : Integer) is {
		if verbose then "Inside PointColore::print".println(); else { }
		super.print(verbose);
		this.couleur().name(verbose).println();
	}
}

class PointNoir(xc: Integer, yc:Integer) extends PointColore is {
	def PointNoir(xc: Integer, yc:Integer) : PointColore(xc, yc, CouleurFactory.noir()) is {}
	def override estGris() : Integer := 0
	def override colore() : Integer := 1
	def override couleur() : Couleur := CouleurFactory.noir()
}

class DefaultPoint() extends PointColore is {
	def DefaultPoint() : PointColore(0, 0, CouleurFactory.blanc()) is {}
	def override estGris() : Integer := 0
	def override couleur() : Couleur := CouleurFactory.blanc()
}

class Test() is {
	def Test() is {}
	def static test(p: Point, p2: PointColore, p3: PointNoir) is {
		c: String; c2: String; c3: String;
		true: Integer := 1;
		false: Integer := 0;
		is
		p.print(true);
		p2.print(true);
		if p2.colore()	<> 0 then c := "colore"; else c := "gris";
		if p3.colore()	<>	0 then c2 := "colore"; else c2 := "gris";
		if p3.colore()	<>	0 then	c3 := "colore";	else c3	:= "gris";
		"Resultats de test: ".println();
		c.print();
		" ".print();
		c2.print(); " ".print();
		c3.print();
		"".println();
	}

	def static test2(p: PointColore) is {
		p.couleur().name(0).print();
	}
}

class A() is {
	var v : Integer;
	def A() is { this.v := 1 ;}
	def f() is { "A::f()\n".print(); }
	def h(x: Integer, y : Integer) : Integer := x + y
}

class A2() extends A is {
	var v : String;
	def A2() : A() is { this.v := "hello"; }
	def override f() is { "A2::f()\n".print(); }
	def g() is {
		this.v := "world";
		(as A : this).v := 1;
		this.f();
		(as A : this).f();
	}
	def override h(x : Integer, y: Integer) : Integer := super.h(x, y)
}

{
	true: Integer := 1;
	p1: Point := new Point(1, 5, "p1");
	p2: Point := new Point(2, 3, "p2");
	p3 : Point := new Point(0, 0, "p3");
	o : PointColore := new PointColore(50, 100, CouleurFactory.noir());
	o2: Point;
	pn : PointNoir := new PointNoir(+1, -1);
	dp : DefaultPoint := new DefaultPoint();
	is
	p2.move(p1.getx(), p1.gety(), true);
	o. setName("origine");
	p2.move(p1.getx()-2*5-3, p1.gety(), true);
	o.print(true);
	p2.print(true);
	"\nClonage de o:".println();
	o2 := o.clone();
	o2.print(true);
	o2.clone().move(54, 36, 0).print(true);
	"\nListe des clones de o:".println();
	o.allClones();
	"Fin de la liste\n".println();
	"Seconde liste des clones de o:".println();
	o2 := p1.clone();
	o2.move(+2, -3, 0);
	p1.print(0);
	c.print();
	o2.clone();
	p1.allClones();
	"Fin de la seconde liste\n".println();
	"test(Point, PointColore, PointNoir)".println();
	Test.test(p1, o, pn);
	"test(PointNoir, PointNoir, PointNoir)".println();
	Test.test(pn, pn, pn);
	p1 := pn;
	Test.test2(o);
	Test.test2(pn);
	o := pn;
	"test(PointNoir, PointNoir, PointNoir)".println();
	Test.test(p1, o, pn);
	Test.test2(o);
	Test.test2(pn);
	"\nDone".println();
}